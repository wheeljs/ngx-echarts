"use strict";(self.webpackChunkngx_echarts_demo=self.webpackChunkngx_echarts_demo||[]).push([[148],{148:(h,r,e)=>{e.r(r),e.d(r,{DemoAdvancedModule:()=>R});var s=e(6814),c=e(2242),I=e(859),g=e(3742),n=e(9212),T=e(3626),y=e(6616),C=e(6987),f=e(6254),x=e(6674),A=e(95),b=e(5539);let z=(()=>{class t{constructor(){this.html=e(7098).Z,this.component=e(6609).Z,this.options={color:["#3398DB"],tooltip:{trigger:"axis",axisPointer:{type:"shadow"}},grid:{left:"3%",right:"4%",bottom:"3%",containLabel:!0},xAxis:[{type:"category",data:["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],axisTick:{alignWithLabel:!0}}],yAxis:[{type:"value"}],series:[{name:"Counters",type:"bar",barWidth:"60%",data:[10,52,200,334,390,330,220]}]}}ngAfterViewInit(){setTimeout(()=>{const o=document.getElementById("chart1"),a=document.getElementById("chart2"),i=(0,x.getInstanceByDom)(o),u=(0,x.getInstanceByDom)(a);(0,x.connect)([i,u])})}static#n=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275cmp=n.Xpm({type:t,selectors:[["app-connect-charts"]],decls:10,vars:4,consts:[["nz-row",""],["nz-col","","nzSpan","12"],["id","chart1","echarts","","theme","macarons",1,"demo-chart",3,"options"],["id","chart2","echarts","","theme","macarons",1,"demo-chart",3,"options"],[3,"html","component"]],template:function(a,i){1&a&&(n.TgZ(0,"div",0)(1,"div",1)(2,"h5"),n._uU(3,"id=chart1"),n.qZA(),n._UZ(4,"div",2),n.qZA(),n.TgZ(5,"div",1)(6,"h5"),n._uU(7,"id=chart2"),n.qZA(),n._UZ(8,"div",3),n.qZA()(),n._UZ(9,"app-code-block",4)),2&a&&(n.xp6(4),n.Q6J("options",i.options),n.xp6(4),n.Q6J("options",i.options),n.xp6(1),n.Q6J("html",i.html)("component",i.component))},dependencies:[A.t3,A.SK,b.P,c._w]})}return t})();var m=e(4404);const p=[[15,0],[-50,10],[-56.5,20],[-46.5,30],[-22.1,40]];let D=(()=>{class t{constructor(){this.html=e(6873).Z,this.component=e(7203).Z,this.options={title:{text:"Try Dragging these Points"},tooltip:{triggerOn:"none",formatter:o=>"X: "+o.data[0].toFixed(2)+"<br>Y: "+o.data[1].toFixed(2)},grid:{},xAxis:{min:-100,max:80,type:"value",axisLine:{onZero:!1}},yAxis:{min:-30,max:60,type:"value",axisLine:{onZero:!1}},dataZoom:[{type:"slider",xAxisIndex:0,filterMode:"empty"},{type:"slider",yAxisIndex:0,filterMode:"empty"},{type:"inside",xAxisIndex:0,filterMode:"empty"},{type:"inside",yAxisIndex:0,filterMode:"empty"}],series:[{id:"a",type:"line",smooth:!0,symbolSize:20,data:p}]}}ngOnDestroy(){this.updatePosition&&window.removeEventListener("resize",this.updatePosition)}onChartReady(o){const a=function(d){p[d]=o.convertFromPixel({gridIndex:0},this.position),o.setOption({series:[{id:"a",data:p}]})},i=d=>{o.dispatchAction({type:"showTip",seriesIndex:0,dataIndex:d})},u=()=>{o.dispatchAction({type:"hideTip"})},l=()=>{o.setOption({graphic:m.map(p,d=>({position:o.convertToPixel({gridIndex:0},d)}))})};window.addEventListener("resize",l),o.on("dataZoom",l),this.updatePosition=l,setTimeout(()=>{o.setOption({graphic:m.map(p,(d,v)=>({type:"circle",position:o.convertToPixel({gridIndex:0},d),shape:{cx:0,cy:0,r:10},invisible:!0,draggable:!0,ondrag:m.curry(a,v),onmousemove:m.curry(i,v),onmouseout:m.curry(u,v),z:100}))})},0)}static#n=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275cmp=n.Xpm({type:t,selectors:[["app-line-draggable"]],decls:2,vars:3,consts:[["echarts","",2,"height","600px",3,"options","chartInit"],[3,"html","component"]],template:function(a,i){1&a&&(n.TgZ(0,"div",0),n.NdJ("chartInit",function(l){return i.onChartReady(l)}),n.qZA(),n._UZ(1,"app-code-block",1)),2&a&&(n.Q6J("options",i.options),n.xp6(1),n.Q6J("html",i.html)("component",i.component))},dependencies:[b.P,c._w]})}return t})();function Z(t,L){1&t&&n._UZ(0,"app-connect-charts")}function P(t,L){1&t&&n._UZ(0,"app-line-draggable")}const O=[{path:"",redirectTo:"advanced-usage",pathMatch:"full"},{path:"advanced-usage",component:(()=>{class t{constructor(){}static#n=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275cmp=n.Xpm({type:t,selectors:[["app-advanced"]],decls:13,vars:1,consts:[["nzTitle","Advanced"],["nz-page-header-breadcrumb",""],["routerLink","/welcome"],[2,"margin-top","8px",3,"nzTabPosition"],["nzTitle","Connect Charts"],["nz-tab",""],["nzTitle","Draggable Chart"]],template:function(a,i){1&a&&(n.TgZ(0,"nz-page-header",0)(1,"nz-breadcrumb",1)(2,"nz-breadcrumb-item")(3,"a",2),n._uU(4,"Home"),n.qZA()(),n.TgZ(5,"nz-breadcrumb-item"),n._uU(6,"Advanced"),n.qZA()()(),n._UZ(7,"nz-divider"),n.TgZ(8,"nz-tabset",3)(9,"nz-tab",4),n.YNc(10,Z,1,0,"ng-template",5),n.qZA(),n.TgZ(11,"nz-tab",6),n.YNc(12,P,1,0,"ng-template",5),n.qZA()()),2&a&&(n.xp6(8),n.Q6J("nzTabPosition","left"))},dependencies:[T.Dg,T.MO,y.xH,y.xw,y.cj,C.g,f.$O,f.A2,g.rH,z,D]})}return t})()}];let S=(()=>{class t{static#n=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275mod=n.oAB({type:t});static#e=this.\u0275inj=n.cJS({imports:[g.Bz.forChild(O),g.Bz]})}return t})(),R=(()=>{class t{static#n=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275mod=n.oAB({type:t});static#e=this.\u0275inj=n.cJS({imports:[s.ez,I.m,c.Ns,S]})}return t})()},7098:(h,r,e)=>{e.d(r,{Z:()=>c});const c='\x3c!-- DEMO START --\x3e\n<div nz-row>\n  <div nz-col nzSpan="12">\n    <h5>id=chart1</h5>\n    <div id="chart1" echarts [options]="options" theme="macarons" class="demo-chart"></div>\n  </div>\n  <div nz-col nzSpan="12">\n    <h5>id=chart2</h5>\n    <div id="chart2" echarts [options]="options" theme="macarons" class="demo-chart"></div>\n  </div>\n</div>\n\x3c!-- DEMO END --\x3e\n\n<app-code-block [html]="html" [component]="component"> </app-code-block>\n'},6873:(h,r,e)=>{e.d(r,{Z:()=>c});const c='\x3c!-- DEMO START --\x3e\n<div echarts (chartInit)="onChartReady($event)" [options]="options" style="height: 600px"></div>\n\x3c!-- DEMO END --\x3e\n\n<app-code-block [html]="html" [component]="component"> </app-code-block>\n'},6609:(h,r,e)=>{e.d(r,{Z:()=>s});const s="import { Component, AfterViewInit } from '@angular/core';\nimport type { EChartsOption } from 'echarts';\nimport { getInstanceByDom, connect } from 'echarts';\n// IGNORE START\ndeclare const require: any;\n// IGNORE END\n\n@Component({\n  selector: 'app-connect-charts',\n  templateUrl: './connect-charts.component.html',\n  styleUrls: ['./connect-charts.component.scss'],\n})\nexport class ConnectChartsComponent implements AfterViewInit {\n  // IGNORE START\n  html =\n    require('!!html-loader?{\"minimize\": {\"removeComments\":false,\"caseSensitive\":true}}!./connect-charts.component.html')\n      .default;\n  component = require('!!raw-loader!./connect-charts.component.ts').default;\n  // IGNORE END\n  options: EChartsOption = {\n    color: ['#3398DB'],\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'shadow',\n      },\n    },\n    grid: {\n      left: '3%',\n      right: '4%',\n      bottom: '3%',\n      containLabel: true,\n    },\n    xAxis: [\n      {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n        axisTick: {\n          alignWithLabel: true,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n      },\n    ],\n    series: [\n      {\n        name: 'Counters',\n        type: 'bar',\n        barWidth: '60%',\n        data: [10, 52, 200, 334, 390, 330, 220],\n      },\n    ],\n  };\n  constructor() {}\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      const chartElement1 = document.getElementById('chart1');\n      const chartElement2 = document.getElementById('chart2');\n      const chart1 = getInstanceByDom(chartElement1);\n      const chart2 = getInstanceByDom(chartElement2);\n      connect([chart1, chart2]);\n    });\n  }\n}\n"},7203:(h,r,e)=>{e.d(r,{Z:()=>s});const s="import { Component, OnDestroy } from '@angular/core';\nimport type { ECharts, EChartsOption } from 'echarts';\nimport * as util from 'zrender/lib/core/util';\n// IGNORE START\ndeclare const require: any;\n// IGNORE END\n\nconst SymbolSize = 20;\nconst Data = [\n  [15, 0],\n  [-50, 10],\n  [-56.5, 20],\n  [-46.5, 30],\n  [-22.1, 40],\n];\n\n@Component({\n  selector: 'app-line-draggable',\n  templateUrl: './line-draggable.component.html',\n  styleUrls: ['./line-draggable.component.scss'],\n})\nexport class LineDraggableComponent implements OnDestroy {\n  // IGNORE START\n  html =\n    require('!!html-loader?{\"minimize\": {\"removeComments\":false,\"caseSensitive\":true}}!./line-draggable.component.html')\n      .default;\n  component = require('!!raw-loader!./line-draggable.component.ts').default;\n  // IGNORE END\n  updatePosition: () => void;\n  options: EChartsOption = {\n    title: {\n      text: 'Try Dragging these Points',\n    },\n    tooltip: {\n      triggerOn: 'none',\n      formatter: params =>\n        'X: ' + params.data[0].toFixed(2) + '<br>Y: ' + params.data[1].toFixed(2),\n    },\n    grid: {},\n    xAxis: {\n      min: -100,\n      max: 80,\n      type: 'value',\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: 'value',\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: 'slider',\n        xAxisIndex: 0,\n        filterMode: 'empty',\n      },\n      {\n        type: 'slider',\n        yAxisIndex: 0,\n        filterMode: 'empty',\n      },\n      {\n        type: 'inside',\n        xAxisIndex: 0,\n        filterMode: 'empty',\n      },\n      {\n        type: 'inside',\n        yAxisIndex: 0,\n        filterMode: 'empty',\n      },\n    ],\n    series: [\n      {\n        id: 'a',\n        type: 'line',\n        smooth: true,\n        symbolSize: SymbolSize,\n        data: Data,\n      },\n    ],\n  };\n  constructor() {}\n\n  ngOnDestroy() {\n    if (this.updatePosition) {\n      window.removeEventListener('resize', this.updatePosition);\n    }\n  }\n\n  onChartReady(myChart: ECharts) {\n    const onPointDragging = function (dataIndex) {\n      Data[dataIndex] = myChart.convertFromPixel(\n        { gridIndex: 0 },\n        this.position as number[]\n      ) as number[];\n\n      // Update data\n      myChart.setOption({\n        series: [\n          {\n            id: 'a',\n            data: Data,\n          },\n        ],\n      });\n    };\n\n    const showTooltip = dataIndex => {\n      myChart.dispatchAction({\n        type: 'showTip',\n        seriesIndex: 0,\n        dataIndex,\n      });\n    };\n\n    const hideTooltip = () => {\n      myChart.dispatchAction({\n        type: 'hideTip',\n      });\n    };\n\n    const updatePosition = () => {\n      myChart.setOption({\n        graphic: util.map(Data, item => ({\n          position: myChart.convertToPixel({ gridIndex: 0 }, item),\n        })),\n      });\n    };\n\n    window.addEventListener('resize', updatePosition);\n    myChart.on('dataZoom', updatePosition);\n\n    // save handler and remove it on destroy\n    this.updatePosition = updatePosition;\n\n    setTimeout(() => {\n      myChart.setOption({\n        graphic: util.map(Data, (item, dataIndex) => {\n          return {\n            type: 'circle',\n            position: myChart.convertToPixel({ gridIndex: 0 }, item),\n            shape: {\n              cx: 0,\n              cy: 0,\n              r: SymbolSize / 2,\n            },\n            invisible: true,\n            draggable: true,\n            ondrag: util.curry<(dataIndex: any) => void, number>(onPointDragging, dataIndex),\n            onmousemove: util.curry<(dataIndex: any) => void, number>(showTooltip, dataIndex),\n            onmouseout: util.curry<(dataIndex: any) => void, number>(hideTooltip, dataIndex),\n            z: 100,\n          };\n        }),\n      });\n    }, 0);\n  }\n}\n"}}]);